git branch	#目前所处的分支
git branch 分支名	#创建一个分支
git branch -d 分支名	#删除分支
git checkout 分支名	#切换到这个分支
git merge 分支名	#合并分支；注意：记得要切换分支再合并；
			合并时可能产生冲突

工作流：
	master：默认；正式版本；线上版本
		dev：做开发；


一 分支介绍
​ 如果把Git比喻为一条小河，master分支是小河的主干/主分支，其他分支就是这条小河的支流，可以把所有分支合并到一起形成一条大河，滚滚奔向大海......

​ Git本质上只是一棵巨大的文件树，分支指的是树的一个分叉，我们可以对分支进行合并。

​ 那么分支在实际开发中有什么用处呢？

​ 如果你准备开发一个新功能，需要两周才能完成，第一周你写了50%的代码，此时如果立刻提交，由于代码还没写完，而不完整的代码库会导致别人不能干活了。但如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。

​ 现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。

​ 分支是Git的杀手级特征，而且Git鼓励在工作流程中频繁使用分支与合并，哪怕一天之内进行许多次都没有关系。因为Git分支非常轻量级，不像其他的版本控制，创建分支意味着要把项目完整的拷贝一份，而Git创建分支是在瞬间完成的，而与你工程的复杂程度无关。
